name: Deploy Next.js to Cloud Server

on:
  push:
    branches:
      - main # 当推送到主分支时触发

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # 获取完整的git历史记录，用于版本信息

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date +%s)
          BUILD_TIME=$(date)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          echo "{\"version\": \"$VERSION-$TIMESTAMP\", \"buildTime\": \"$BUILD_TIME\"}" > public/version.json
          cat public/version.json

      - name: Build Docker image
        run: |
          # 使用缓存破坏参数确保每次构建都使用最新代码
          docker build --no-cache --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t lizh606/wanyue-blog:latest -t lizh606/wanyue-blog:${{ env.VERSION }}-${{ env.TIMESTAMP }} .

      - name: Push Docker image to Docker Hub
        run: |
          docker push lizh606/wanyue-blog:latest
          docker push lizh606/wanyue-blog:${{ env.VERSION }}-${{ env.TIMESTAMP }}

      - name: SSH to remote server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHPWD }}
          port: 22
          debug: true
          script: |
            # 登录后，拉取最新的 Docker 镜像并启动容器
            # 添加重试逻辑，最多尝试5次
            max_attempts=5
            attempt=1

            while [ $attempt -le $max_attempts ]
            do
              echo "Attempt $attempt to pull Docker image..."
              if docker pull lizh606/wanyue-blog:latest; then
                echo "Successfully pulled Docker image"
                break
              else
                echo "Pull failed, waiting before retry..."
                if [ $attempt -eq $max_attempts ]; then
                  echo "Maximum attempts reached. Exiting."
                  exit 1
                fi
                # 指数退避，等待时间随尝试次数增加
                sleep $((2 ** $attempt))
              fi
              attempt=$((attempt + 1))
            done

            docker stop next-client || true
            docker rm next-client || true
            # 使用 --no-cache 选项启动容器，并设置环境变量禁用缓存
            docker run -d --name next-client -p 3000:3000 -e NODE_ENV=production -e NEXT_DISABLE_CACHE=1 lizh606/wanyue-blog:latest
